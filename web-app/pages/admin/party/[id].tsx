import Head from 'next/head'
import React, { useCallback, useEffect, useState } from "react";
import 'flowbite';
import { useRouter } from "next/router";
import { Button, Modal } from "flowbite-react";
import AdminLayout from "@/components/layouts/Admin";

interface Party {
    name: string;
    description: string;
    id: string;
    status: number;
    zipcode: string;
    location: string;
    dateParty: string;
    owner: string;
    players: number;
    time: string;
}

export default function Party() {
    const [party, setParty] = useState<Party[]>([]);
    const [cancelModal, setCancelModal] = useState<boolean>(false);
    const [publishModal, setPublishModal] = useState<boolean>(false);
    const [isLoader, setIsLoader] = useState<boolean>(false);
    const [idParty, setIdParty] = useState<string>('');
    const [error, setError] = useState("");
    const router = useRouter();

    useEffect(() => {
        document.body.classList.add("bg-custom-light-blue");
        if (!router.isReady) return;

        const { id } = router.query;
        if (typeof id === 'string') {
            setIdParty(id);

            fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/party/${id}`, {
                method: 'GET',
            })
                .then(response => {
                    const statusCode = response.status;
                    if (statusCode === 404) {
                        router.push('/admin/party');
                    }
                    return response.json();
                })
                .then((data) => {
                    setParty(data.party)
                }).catch((error) => {
                    console.log(error);

                });
        }
    }, [router.isReady]);

    const cancelParty = useCallback(async (e: any) => {
        e.preventDefault();

        setIsLoader(true);

        await fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/party/admin/cancel`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: idParty,
            })
        })
            .then(response => response.json())
            .then((data) => {
                router.push('/admin/party');
            }).catch((error) => {
                console.log(error);
            });
    }, [idParty]);

    const publishParty = useCallback(async (e: any) => {
        e.preventDefault();

        setIsLoader(true);

        await fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/party/admin/publish`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: idParty,
            })
        })
            .then(response => response.json())
            .then((data) => {
                router.push('/admin/party');
            }).catch((error) => {
                console.log(error);
            });
    }, [idParty]);

    return (
        <>
            <Head>
                <title>Ludotter</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <AdminLayout>
                
            </AdminLayout>
        </>
    )
}